INSTALLATION

/bin/bash
MY_INSTALL_DIR="bmad.4.24.2025.1525"
FAVORITE_BMAD_PATH="Projects"
BASE_PATH="${HOME}/${FAVORITE_BMAD_PATH}"
BASE_PATH_AND_INSTALL_DIR="${BASE_PATH}/${MY_INSTALL_DIR}"
mkdir ${BASE_PATH_AND_INSTALL_DIR}
cd ${BASE_PATH_AND_INSTALL_DIR}
git clone git@github.com:JSL1GH/Bmad-external.git --recurse-submodules
cd Bmad-external
mkdir buildhere
cd buildhere
cmake ..
make


OPTIONS
There are many options that may be used with the cmake command.  The option should be given with the format, '-D' followed by the option, followed by an '=', followed by a value.

BUILD_FFTW=[ON|OFF]       Value is 'OFF' by default - set to 'ON' if would like to build specific library
BUILD_FGSL=[ON|OFF]
BUILD_HDF5=[ON|OFF]
BUILD_LAPACK=[ON|OFF]
BUILD_LAPACK95=[ON|OFF]
BUILD_PLPLOT=[ON|OFF]
BUILD_XRAYLIB=[ON|OFF]
BUILD_ALL=[ON|OFF]

The default value is BUILD_ALL.  Once a user supplies a specific library, or libraries, BUILD_ALL is set to OFF

For example, to indicate that the user would like to build the FGSL library:
	cmake -DBUILD_FGSL=ON

CMAKE_INSTALL_PREFIX=${HOME}/bmad/external - by default, built to a path in the user's home area called bmad/external
  A user can specify an alternate place to which the libraries should be built by supplying their own value for CMAKE_INSTALL_PREFIX

CUSER_FORCE [True|False]
ON 2nd build or more, must be True for now - I have to figure out the best way to implement this!

The default install of the build is to the user's $HOME/bmad/external directory.  A user may supply a different directory path by providing a value for CMAKE_INSTALL_PREFIX.
Before writing to an area, the cmake process checks for its existence.  If it exists, the build terminates, so as not to overwrite a prior build  If a user would like to override
the build, setting a value of CUSER_FORCE=True will allow the build to continue.

CMAKE_MODULE_PATH - defaults to the path of CMAKE_INSTALL_PREFIX.  This allows a user to specify where prior builds may have been placed on disk, allowing a user to write to multiple
directories for quick testing of various build scenarios

CMAKE_PRINT_DEBUG [ON|OFF] - a user can specify if additional debug information should be output during the cmake setup process.
Note that, at this time, there is a lot of 'debug' text printed even if PRINT_DEBUG is off.  This will be 'corrected' once a good build is at hand.

BUILD_ANYWAY [ON|OFF] - default is OFF.  Allows a user to indicate that the build of a library should be done, even if it already exists and can be found.

CMAKE_BUILD_TYPE=Release [Release|Debug] - allows a user to specify if the build is a production build or a debug build.  A debug build will include information for debugging code.

OWN_FINDPACKAGE [ON|OFF] - defaults to ON - this should always be used - our own home grown FIND_PACKAGE - for packages that do not have "native" cmake support.

OWN_FIND_ALL_PACKAGE [ON|OFF] - defaults to OFF - should not be necessary - as cmake should have this support already there - but a user may elect to use our home grown version - but caveat emptor


Note:

For repeated builds, be sure to clear the 'cmake cache' by removing the Bmad-external/buildhere/CMakeCache.txt file (of course, buildhere is the directory I used in my example install above - please change accordingly)
If the cache is not cleared, cmake will use any new options, along with any options (unless overridden with the new cmake) that existed from the last cmake build.






__________________________________________________
IGNORE BELOW THIS LINE - FOR NOW


/bin/bash
INSTALL_DIR="bmad.UNIQUE_STRING"
mkdir /home/cfsd/laster/${INSTALL_DIR}
cd /home/cfsd/laster/${INSTALL_DIR}
git clone git@github.com:JSL1GH/Bmad-external.git --recurse-submodules
cd Bmad-external
mkdir buildhere
cd buildhere
cmake .. -DCMAKE_PRINT_DEBUG=True
make


-DCMAKE_BUILD_TYPE=Release [Release|Debug|RelWithDebInfo|MinSizeRel]


For temporary testing right now, until I push up the modification
1 - Download the files to DOWNLOAD



/bin/bash
# UNIQUE_STRING CAN BE ANYTHING - TO SEPARATE OUT THE BUILDS
#DATE_THIS_MONTH=`date +'%m.%d.%Y'` 
#UNIQUE_STRING=${DATE_THIS_MONTH}
UNIQUE_STRING="myTest.1"
INSTALL_DIR="bmad.${UNIQUE_STRING}"
WORK_DIR=`pwd`
mkdir ${WORK_DIR}/${INSTALL_DIR}
cd ${WORK_DIR}/${INSTALL_DIR}
git clone git@github.com:JSL1GH/Bmad-external.git --recurse-submodules
cd Bmad-external
mkdir buildhere
cd buildhere
cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True
make


  602  cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug -DBUILD_LAPACK=ON -DBUILD_PLPLOT=ON -DBUILD_ANYWAY=ON
  603  make
  604  cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug -DBUILD_LAPACK=ON -DBUILD_PLPLOT=ON -DBUILD_ANYWAY=ON
  605  cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug
  606  cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug -DBUILD_ANYWAY=ON
  607  cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug -DBUILD_ANYWAY=ON


  619  rm CMakeCache.txt 
  620  cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug


option(BUILD_FGSL "Build FGSL" OFF)
option(BUILD_HDF5 "Build HDF5, if needed" OFF)
option(BUILD_LAPACK "Build LAPACK" OFF)
option(BUILD_LAPACK95 "Build LAPACK95" OFF)
option(BUILD_PLPLOT "Build plplot" OFF)
option(BUILD_XRAYLIB "Build xraylib" OFF)
option(BUILD_FFTW "Build fftw" OFF)
option(BUILD_OPENMPI "Build openmpi" OFF)
option(BUILD_ALL "Build all" "OFF")

option(BUILD_ANYWAY "Build all packages - or the specified ones - even if they are available on the system!" "OFF")

cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug -DBUILD_OPENMPI=ON
cmake .. -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_BUILD_TYPE=Debug -DBUILD_OPENMPI=ON -DBUILD_ANYWAY=ON

cmake -DCUSER_FORCE=True -DCMAKE_INSTALL_PREFIX=/home/cfsd/laster/bmad/production_build.4.7.25.1334 -DCMAKE_PRINT_DEBUG=ON -DBUILD_ANYWAY=ON -DOWN_FINDPACKAGE=True ..


cmake -DCMAKE_PRINT_DEBUG=ON ..

#user can specify where bmad_external link should look to find packages built that they would like to use
#so end up overriding the "default" cmake find pathway
-DCMAKE_PREFIX_PATH=/home/cfsd/laster/bmad/external


/bin/bash
MY_INSTALL_DIR="bmad.4.8.1423"
BASE_PATH="${HOME}/Projects"
BASE_PATH_AND_INSTALL_DIR="${BASE_PATH}/${MY_INSTALL_DIR}"
mkdir ${BASE_PATH_AND_INSTALL_DIR}
cd ${BASE_PATH_AND_INSTALL_DIR}
git clone git@github.com:JSL1GH/Bmad-external.git --recurse-submodules
cd Bmad-external
mkdir buildhere
cd buildhere
cmake -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=true ..
make


cd /home/cfsd/laster/Projects/bmad.4.21.2025.1525/Bmad-external/buildhere


cmake -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_PREFIX_PATH=/home/cfsd/laster/bmad/external.prod ..


cmake -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_PREFIX_PATH=/home/cfsd/laster/bmad/external.prod -DBUILD_ANYWAY=ON ..


 /usr/bin/mkdir -p '/home/cfsd/laster/bmad/externalRelease/lib'
 /bin/sh ../libtool   --mode=install /usr/bin/install -c   libxrlf03.la '/home/cfsd/laster/bmad/externalRelease/lib'
libtool:   error: error: cannot install 'libxrlf03.la' to a directory not ending in /home/cfsd/laster/bmad/external/lib

I was trying to understand this - don't understand why it only happens when I change the 
CMAKE_INSTALL_PREFIX or the CMAKE_PREFIX_PATH.


Command I used was:
    cmake -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_INSTALL_PREFIX=/home/cfsd/laster/bmad/externalRelease -DCMAKE_PREFIX_PATH=/home/cfsd/laster/bmad/externalRelease ..

And I think this is what may be going on!!

First I build it successfully - after the initial install - going to wherever I tell it to go.
Then I change the CMAKE_INSTALL_PREFIX or the CMAKE_PREFIX_PATH - and build it again - and everything goes bad.

WHY?

Because everything is really not 'pristine'.  It's not just a pure CMake build - there are some configures that get run along the way.
I think those 'configures' end up hard-coding the initial paths - such that subsequent builds that not want to change some CMake variable paths.
Don't get reapplied to those items built with configure.

So any change of those values really requires a new fresh complete installation.

cmake -DCMAKE_PRINT_DEBUG=True -DCUSER_FORCE=True -DCMAKE_INSTALL_PREFIX=/home/cfsd/laster/bmad/externalRelease -DCMAKE_PREFIX_PATH=/home/cfsd/laster/bmad/externalRelease -DENABLE_OPENMP=True ..
